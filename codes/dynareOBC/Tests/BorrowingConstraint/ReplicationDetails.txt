To solve for the global solution, run the script RunGlobalSolution.m.
Note that this requires the MATLAB Coder toolkit, in order to compile the code to C for acceptable performance.
Parameters may be adjusted in GlobalSolution.m.

To run the accuracy tests, run:

clear all; dynareOBC BorrowingConstraint.mod periodsofuncertainty=??? [fastcubature|maxcubaturedegree=5|quasimontecarlolevel=9] mlvsimulationmode=1 cubaturetolerance=0 compilesimulationcode timetoescapebounds=45
tmp = abs( dynareOBC_.MLVSimulationWithBounds.XError( 101:end ) );
disp( [ mean(tmp) sqrt(mean(tmp.^2)) max(tmp) ] );

Alternatively, to run them in a loop, with timing, run:

pou=1;
while pou <= 45;
    save pou.mat pou;
    t1 = java.lang.System.currentTimeMillis;
    save time.mat t1;
    eval( [ 'clear all; dynareOBC BorrowingConstraint.mod periodsofuncertainty=' int2str( pou ) ' [fastcubature|maxcubaturedegree=5|quasimontecarlolevel=9] mlvsimulationmode=1 cubaturetolerance=0 compilesimulationcode timetoescapebounds=45' ] );
    t2 = java.lang.System.currentTimeMillis;
    load time.mat;
    seconds = ( t2 - t1 ) / 1000;
    tmp = abs( dynareOBC_.MLVSimulationWithBounds.XError( 101:end ) );
    load pou.mat
    disp( [ pou mean(tmp) sqrt(mean(tmp.^2)) max(tmp) seconds ] );
    fid = fopen( 'TempOutput.txt', 'a+' );
    fprintf( fid, '%d %.15g %.15g %.15g %.15g\n', pou, mean(tmp), sqrt(mean(tmp.^2)), max(tmp), seconds );
    fclose( fid );
    pou = pou + 1;
end
